// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ---------- Tenant ----------
 */
model Hotel {
  id           String   @id @default(cuid())
  name         String
  brandColor   String?
  wifiName     String?  @default("Hotel_Guest_WiFi")
  wifiPassword String?  @default("Guest12345")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  users           User[]
  upsellDeals     UpsellDeal[]
  tasks           ServiceTask[]
  deals           Deal[]
  revenue         RevenueLedger[]
  menuItems       MenuItem[]
  minibarItems    MinibarItem[]
  dealRedemptions DealRedemption[]

  @@map("hotels")
}

/**
 * ---------- Auth (NextAuth) ----------
 */
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  hotelId String?
  hotel   Hotel?  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  accounts Account[]
  sessions Session[]

  @@index([hotelId])
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

/**
 * ---------- Business Models ----------
 */
model UpsellDeal {
  id          String   @id @default(cuid())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  description String?
  imageUrl    String?
  type        String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@index([hotelId])
  @@map("upsell_deals")
}

model ServiceTask {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("pending")
  priority    String   @default("medium")
  assignedTo  String?
  roomNumber  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@index([hotelId])
  @@map("service_tasks")
}

model RevenueLedger {
  id         String   @id @default(cuid())
  amount     Float
  dealName   String
  guestName  String?
  roomNumber String?
  createdAt  DateTime @default(now())

  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@index([hotelId])
  @@index([createdAt])
  @@map("revenue_ledger")
}

/**
 * ---------- Menu & Minibar ----------
 */
model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  category    String
  imageUrl    String?
  prepTime    String?
  isVeg       Boolean  @default(true)
  isAvailable Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  
  @@index([hotelId])
  @@index([category])
  @@map("menu_items")
}

model MinibarItem {
  id                String   @id @default(cuid())
  name              String
  price             Decimal  @db.Decimal(10, 2)
  category          String
  stockQuantity     Int      @default(0)
  lowStockThreshold Int      @default(5)
  isAvailable       Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  
  @@index([hotelId])
  @@map("minibar_items")
}

/**
 * ---------- Deals ----------
 */
model Deal {
  id          String   @id @default(cuid())
  title       String
  description String?
  price       Float
  isRegular   Boolean  @default(false)  // ← ENSURE THIS LINE EXISTS
  isActive    Boolean  @default(true)   // ← ADD THIS TOO
  category    String?                   // ← OPTIONAL BUT RECOMMENDED
  imageUrl    String?                   // ← OPTIONAL BUT RECOMMENDED
  hotelId     String
  hotel       Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  redemptions DealRedemption[]

  @@index([hotelId])
}


model DealRedemption {
  id          String    @id @default(cuid())
  dealId      String
  deal        Deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
  hotelId     String
  hotel       Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  roomNumber  String
  guestName   String?
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  fulfilledAt DateTime?
}
