// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * Multi-tenancy:
 * - Hotel is the tenant.
 * - User, UpsellDeal, ServiceTask, RevenueLedger all belong to a Hotel via required hotelId.
 * - Useful indexes on hotelId to scope queries efficiently.
 */

/**
 * ---------- Tenant ----------
 */
model Hotel {
  id         String   @id @default(cuid())
  name       String
  brandColor String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  users   User[]
  deals   UpsellDeal[]
  tasks   ServiceTask[]
  revenue RevenueLedger[]

  @@map("hotels")
}

/**
 * ---------- Auth (NextAuth) ----------
 */
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  // Multi-tenant link (optional during creation, assigned after)
  hotelId String?
  hotel   Hotel?  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  // Auth relations
  accounts Account[]
  sessions Session[]

  @@index([hotelId])
  @@map("users")
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

/**
 * ---------- Business Models ----------
 */
model UpsellDeal {
  id          String   @id @default(cuid())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  description String?
  imageUrl    String?
  type        String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenant link (required)
  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@index([hotelId])
  @@map("upsell_deals")
}

model ServiceTask {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("pending")
  priority    String   @default("medium")
  assignedTo  String?
  roomNumber  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenant link (required)
  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@index([hotelId])
  @@map("service_tasks")
}

/**
 * ---------- Revenue Tracking ----------
 */
model RevenueLedger {
  id         String   @id @default(cuid())
  amount     Float
  dealName   String
  guestName  String?
  roomNumber String?
  createdAt  DateTime @default(now())

  // Multi-tenant link (required)
  hotelId String
  hotel   Hotel  @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@index([hotelId])
  @@index([createdAt])
  @@map("revenue_ledger")
}
